[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "anki-mcq-importer"
version = "1.1.0"
description = "Automatically import Multiple Choice Questions (MCQs) into Anki from your clipboard"
authors = [
    {name = "Jason Tsai", email = "jason.tsaicc@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["anki", "flashcards", "mcq", "education", "exam", "preparation", "aws"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Topic :: Education :: Computer Aided Instruction (CAI)",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
]
requires-python = ">=3.8"
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.990",
    "pre-commit>=2.20.0",
    "isort>=5.12.0",
]
clipboard = [
    "pyperclip>=1.8.2",
]
all = [
    "anki-mcq-importer[dev,clipboard]"
]

[project.urls]
Homepage = "https://github.com/jasontsaicc/anki-mcq-importer"
Repository = "https://github.com/jasontsaicc/anki-mcq-importer"
Issues = "https://github.com/jasontsaicc/anki-mcq-importer/issues"
Documentation = "https://github.com/jasontsaicc/anki-mcq-importer#readme"

[project.scripts]
anki-mcq-importer = "anki_mcq_importer.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv",
]
per-file-ignores = [
    "__init__.py:F401",
]